From 7e6e7b4667020b61986c60e0c2d642e700e7966d Mon Sep 17 00:00:00 2001
From: Ryan Scott <ryan.gl.scott@gmail.com>
Date: Sat, 9 Sep 2017 13:08:41 -0400
Subject: [PATCH] =?UTF-8?q?Adapt=20to=20the=20Semigroup=E2=80=93Monoid=20P?=
 =?UTF-8?q?roposal=20(#65)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* Adapt to the Semigroupâ€“Monoid Proposal

* GHC 8.0 fix

---
 Data/Primitive/Array.hs      | 12 +++++++++++-
 Data/Primitive/SmallArray.hs | 10 ++++++++++
 2 files changed, 21 insertions(+), 1 deletion(-)

diff --git a/Data/Primitive/Array.hs b/Data/Primitive/Array.hs
index a0fa0ed..5a3afdc 100644
--- a/Data/Primitive/Array.hs
+++ b/Data/Primitive/Array.hs
@@ -52,6 +52,9 @@ import Data.Foldable (Foldable(..), toList)
 import Data.Traversable (Traversable(..))
 import Data.Monoid
 #endif
+#if MIN_VERSION_base(4,9,0)
+import Data.Semigroup
+#endif
 
 import Text.ParserCombinators.ReadP
 
@@ -272,7 +275,7 @@ cloneArray :: Array a -- ^ source array
            -> Array a
 {-# INLINE cloneArray #-}
 #if __GLASGOW_HASKELL__ >= 702
-cloneArray (Array arr#) (I# off#) (I# len#) 
+cloneArray (Array arr#) (I# off#) (I# len#)
   = case cloneArray# arr# off# len# of arr'# -> Array arr'#
 #else
 cloneArray arr off len = runST $ do
@@ -528,9 +531,16 @@ instance MonadZip Array where
 instance MonadFix Array where
   mfix f = let l = mfix (toList . f) in fromListN (length l) l
 
+#if MIN_VERSION_base(4,9,0)
+instance Semigroup (Array a) where
+  (<>) = (<|>)
+#endif
+
 instance Monoid (Array a) where
   mempty = empty
+#if !(MIN_VERSION_base(4,11,0))
   mappend = (<|>)
+#endif
   mconcat l = createArray sz (die "mconcat" "impossible") $ \ma ->
     let go !_  [    ] = return ()
         go off (a:as) =
diff --git a/Data/Primitive/SmallArray.hs b/Data/Primitive/SmallArray.hs
index 0684a10..5de2f16 100644
--- a/Data/Primitive/SmallArray.hs
+++ b/Data/Primitive/SmallArray.hs
@@ -77,6 +77,9 @@ import Data.Data
 import Data.Foldable
 import Data.Functor.Identity
 import Data.Monoid
+#if MIN_VERSION_base(4,9,0) && !(MIN_VERSION_base(4,11,0))
+import qualified Data.Semigroup as Sem
+#endif
 import Text.ParserCombinators.ReadPrec
 import Text.Read
 import Text.Read.Lex
@@ -575,9 +578,16 @@ instance MonadZip SmallArray where
 instance MonadFix SmallArray where
   mfix f = fromList . mfix $ toList . f
 
+#if MIN_VERSION_base(4,9,0)
+instance Sem.Semigroup (SmallArray a) where
+  (<>) = (<|>)
+#endif
+
 instance Monoid (SmallArray a) where
   mempty = empty
+#if !(MIN_VERSION_base(4,11,0))
   mappend = (<|>)
+#endif
   mconcat sas = createSmallArray n (die "mconcat" "impossible") $ \sma ->
     fix ? 0 ? sas $ \go off l -> case l of
       [] -> return ()
