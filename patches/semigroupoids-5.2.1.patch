From 39148303e6d223b91df238a7a6d68ae6dfe8fc58 Mon Sep 17 00:00:00 2001
From: Ryan Scott <ryan.gl.scott@gmail.com>
Date: Fri, 8 Sep 2017 22:15:14 -0400
Subject: [PATCH] =?UTF-8?q?Fix=20the=20build=20post-Semigroup=E2=80=93Mono?=
 =?UTF-8?q?id=20Proposal=20(#61)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/Data/Functor/Alt.hs             | 8 +++++++-
 src/Data/Functor/Bind/Trans.hs      | 2 ++
 src/Data/Semigroup/Bitraversable.hs | 2 ++
 src/Data/Semigroup/Traversable.hs   | 3 +++
 4 files changed, 14 insertions(+), 1 deletion(-)

diff --git a/src/Data/Functor/Alt.hs b/src/Data/Functor/Alt.hs
index 464891e..09b7227 100644
--- a/src/Data/Functor/Alt.hs
+++ b/src/Data/Functor/Alt.hs
@@ -50,8 +50,8 @@ import Data.Functor.Bind
 import Data.Functor.Compose
 import Data.Functor.Product
 import Data.Functor.Reverse
-import Data.Semigroup hiding (Product)
 import Data.List.NonEmpty (NonEmpty(..))
+import Data.Semigroup (Option(..), Semigroup(..))
 import Prelude (($),Either(..),Maybe(..),const,IO,Ord,(++),(.),either,seq,undefined)
 import Unsafe.Coerce
 
@@ -61,6 +61,11 @@ import Data.IntMap (IntMap)
 import Data.Sequence (Seq)
 import qualified Data.Map as Map
 import Data.Map (Map)
+# if MIN_VERSION_base(4,8,0)
+import Prelude (mappend)
+# else
+import Data.Monoid (mappend)
+# endif
 #endif
 
 #if defined(MIN_VERSION_tagged) || (MIN_VERSION_base(4,7,0))
@@ -73,6 +78,7 @@ import Generics.Deriving.Base
 import GHC.Generics
 #endif
 
+
 infixl 3 <!>
 
 -- | Laws:
diff --git a/src/Data/Functor/Bind/Trans.hs b/src/Data/Functor/Bind/Trans.hs
index 805ce2a..7ff4224 100644
--- a/src/Data/Functor/Bind/Trans.hs
+++ b/src/Data/Functor/Bind/Trans.hs
@@ -31,7 +31,9 @@ import qualified Control.Monad.Trans.State.Strict as Strict
 import qualified Control.Monad.Trans.Writer.Strict as Strict
 import Data.Functor.Bind
 import Data.Orphans ()
+#if !(MIN_VERSION_base(4,11,0))
 import Data.Semigroup hiding (Product)
+#endif
 import Prelude hiding (id, (.))
 
 -- | A subset of monad transformers can transform any 'Bind' as well.
diff --git a/src/Data/Semigroup/Bitraversable.hs b/src/Data/Semigroup/Bitraversable.hs
index b55433f..7bacbe3 100644
--- a/src/Data/Semigroup/Bitraversable.hs
+++ b/src/Data/Semigroup/Bitraversable.hs
@@ -15,7 +15,9 @@ module Data.Semigroup.Bitraversable
   ) where
 
 import Control.Applicative
+#if !(MIN_VERSION_base(4,11,0))
 import Data.Semigroup
+#endif
 import Data.Semigroup.Traversable.Class
 
 bifoldMap1Default :: (Bitraversable1 t, Semigroup m) => (a -> m) -> (b -> m) -> t a b -> m
diff --git a/src/Data/Semigroup/Traversable.hs b/src/Data/Semigroup/Traversable.hs
index 5a8e19d..a9cc1e2 100644
--- a/src/Data/Semigroup/Traversable.hs
+++ b/src/Data/Semigroup/Traversable.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 -----------------------------------------------------------------------------
 -- |
 -- Copyright   :  (C) 2011-2015 Edward Kmett
@@ -14,7 +15,9 @@ module Data.Semigroup.Traversable
   ) where
 
 import Control.Applicative
+#if !(MIN_VERSION_base(4,11,0))
 import Data.Semigroup
+#endif
 import Data.Semigroup.Traversable.Class
 
 foldMap1Default :: (Traversable1 f, Semigroup m) => (a -> m) -> f a -> m
