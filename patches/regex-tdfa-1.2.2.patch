diff -ru regex-tdfa-1.2.2.orig/Data/IntMap/CharMap2.hs regex-tdfa-1.2.2/Data/IntMap/CharMap2.hs
--- regex-tdfa-1.2.2.orig/Data/IntMap/CharMap2.hs	2016-04-28 13:04:18.000000000 +0200
+++ regex-tdfa-1.2.2/Data/IntMap/CharMap2.hs	2017-09-17 11:11:02.246740925 +0200
@@ -1,4 +1,5 @@
 {-# LANGUAGE CPP #-}
+{-# LANGUAGE GeneralizedNewtypeDeriving #-}
 module Data.IntMap.CharMap2 where
 
 #ifdef __GLASGOW_HASKELL__
@@ -6,6 +7,9 @@
 #else
 import Data.Char (chr)
 #endif
+#if MIN_VERSION_base(4,9,0)
+import Data.Semigroup
+#endif
 import Data.Char as C(ord)
 import Data.List as L (map)
 import qualified Data.IntMap as M
@@ -16,14 +20,12 @@
 unsafeChr = chr
 #endif
 
-newtype CharMap a = CharMap {unCharMap :: M.IntMap a} deriving (Eq,Ord,Read,Show)
-
-instance Monoid (CharMap a) where
-  mempty = CharMap mempty
-  CharMap x `mappend` CharMap y = CharMap (x `mappend` y)
-
-instance Functor CharMap where
-  fmap f (CharMap m) = CharMap (fmap f m)
+newtype CharMap a = CharMap {unCharMap :: M.IntMap a}
+                  deriving (Eq,Ord,Read,Show,Functor,Monoid
+#if MIN_VERSION_base(4,9,0)
+                           ,Semigroup
+#endif
+                           )
 
 type Key = Char
 
diff -ru regex-tdfa-1.2.2.orig/Data/IntMap/EnumMap2.hs regex-tdfa-1.2.2/Data/IntMap/EnumMap2.hs
--- regex-tdfa-1.2.2.orig/Data/IntMap/EnumMap2.hs	2016-04-28 13:04:18.000000000 +0200
+++ regex-tdfa-1.2.2/Data/IntMap/EnumMap2.hs	2017-09-17 11:11:02.246740925 +0200
@@ -1,5 +1,10 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE GeneralizedNewtypeDeriving #-}
 module Data.IntMap.EnumMap2 where
 
+#if MIN_VERSION_base(4,9,0)
+import Data.Semigroup
+#endif
 import Data.Foldable(Foldable(..))
 import qualified Data.IntMap as M
 import qualified Data.IntSet.EnumSet2 as S (EnumSet(..))
@@ -8,17 +13,11 @@
 import qualified Prelude as L (map)
 
 newtype EnumMap k a = EnumMap {unEnumMap :: M.IntMap a}
-  deriving (Eq,Ord,Read,Show)
-
-instance Ord k => Monoid (EnumMap k a) where
-  mempty = EnumMap mempty
-  EnumMap x `mappend` EnumMap y = EnumMap (x `mappend` y)
-
-instance Ord k => Functor (EnumMap k) where
-  fmap f (EnumMap m) = EnumMap (fmap f m)
-
-instance Ord k => Foldable (EnumMap k) where
-  foldMap f (EnumMap m) = foldMap f m
+  deriving (Eq,Ord,Read,Show,Monoid,Functor,Foldable
+#if MIN_VERSION_base(4,9,0)
+           ,Semigroup
+#endif
+           )
 
 (!) :: (Enum key) => EnumMap key a -> key -> a
 (!) (EnumMap m) k = (M.!) m (fromEnum k)
diff -ru regex-tdfa-1.2.2.orig/Data/IntSet/EnumSet2.hs regex-tdfa-1.2.2/Data/IntSet/EnumSet2.hs
--- regex-tdfa-1.2.2.orig/Data/IntSet/EnumSet2.hs	2016-04-28 13:04:18.000000000 +0200
+++ regex-tdfa-1.2.2/Data/IntSet/EnumSet2.hs	2017-09-17 11:11:02.246740925 +0200
@@ -1,15 +1,20 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE GeneralizedNewtypeDeriving #-}
 module Data.IntSet.EnumSet2 where
 
+#if MIN_VERSION_base(4,9,0)
+import Data.Semigroup
+#endif
 import qualified Data.IntSet as S
 import qualified Data.List as L (map)
 import Data.Monoid(Monoid(..))
 
 newtype EnumSet e = EnumSet {unEnumSet :: S.IntSet}
-  deriving (Eq,Ord,Read,Show)
-
-instance Monoid (EnumSet e) where
-  mempty = EnumSet mempty
-  EnumSet x `mappend` EnumSet y = EnumSet (x `mappend` y)
+  deriving (Eq,Ord,Read,Show,Monoid
+#if MIN_VERSION_base(4,9,0)
+           ,Semigroup
+#endif
+           )
 
 (\\) :: (Enum e) => EnumSet e -> EnumSet e -> EnumSet e
 (\\) (EnumSet s1) (EnumSet s2) = EnumSet ((S.\\) s1 s2)
diff -ru regex-tdfa-1.2.2.orig/Text/Regex/TDFA/CorePattern.hs regex-tdfa-1.2.2/Text/Regex/TDFA/CorePattern.hs
--- regex-tdfa-1.2.2.orig/Text/Regex/TDFA/CorePattern.hs	2016-04-28 13:04:18.000000000 +0200
+++ regex-tdfa-1.2.2/Text/Regex/TDFA/CorePattern.hs	2017-09-17 11:11:02.246740925 +0200
@@ -30,10 +30,16 @@
 -- (start) looking for the first with an embedded PGroup can be found
 -- and the PGroup free elements can be wrapped in some new PNOTAG
 -- semantic indicator.
+
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE GeneralizedNewtypeDeriving #-}
 module Text.Regex.TDFA.CorePattern(Q(..),P(..),WhichTest(..),Wanted(..)
                                   ,TestInfo,OP(..),SetTestInfo(..),NullView
                                   ,patternToQ,cleanNullView,cannotAccept,mustAccept) where
 
+#if MIN_VERSION_base(4,9,0)
+import Data.Semigroup
+#endif
 import Control.Monad.RWS {- all -}
 import Data.Array.IArray(Array,(!),accumArray,listArray)
 import Data.List(sort)
@@ -85,11 +91,12 @@
 
 -- This is newtype'd to allow control over class instances
 -- This is a set of WhichTest where each test has associated pattern location information
-newtype SetTestInfo = SetTestInfo {getTests :: EnumMap WhichTest (EnumSet DoPa)} deriving (Eq)
-
-instance Monoid SetTestInfo where
-  mempty = SetTestInfo mempty
-  SetTestInfo x `mappend` SetTestInfo y = SetTestInfo (x `mappend` y)
+newtype SetTestInfo = SetTestInfo {getTests :: EnumMap WhichTest (EnumSet DoPa)}
+                    deriving (Eq,Monoid
+#if MIN_VERSION_base(4,9,0)
+                             ,Semigroup
+#endif
+                             )
 
 instance Show SetTestInfo where
   show (SetTestInfo sti) = "SetTestInfo "++show (mapSnd (Set.toList) $ Map.assocs sti)
