diff -ru fingertree-0.1.1.0.orig/Data/FingerTree.hs fingertree-0.1.1.0/Data/FingerTree.hs
--- fingertree-0.1.1.0.orig/Data/FingerTree.hs	2015-06-09 13:26:48.000000000 +0200
+++ fingertree-0.1.1.0/Data/FingerTree.hs	2017-09-17 10:32:22.555868451 +0200
@@ -64,6 +64,12 @@
 
 import Control.Applicative (Applicative(pure, (<*>)), (<$>))
 import Data.Monoid
+#if MIN_VERSION_base(4,9,0)
+import Data.Semigroup
+#endif
+#if MIN_VERSION_base(4,9,0)
+import Data.Semigroup
+#endif
 import Data.Foldable (Foldable(foldMap), toList)
 
 infixr 5 ><
@@ -91,10 +97,18 @@
     fmap _ EmptyR    = EmptyR
     fmap f (xs :> x) = fmap f xs :> f x
 
+#if MIN_VERSION_base(4,9,0)
+instance (Measured v a) => Semigroup (FingerTree v a) where
+    (<>) = (><)
+#endif
+
 -- | 'empty' and '><'.
 instance Measured v a => Monoid (FingerTree v a) where
     mempty = empty
+#if !(MIN_VERSION_base(4,11,0))
     mappend = (><)
+#endif
+
 
 -- Explicit Digit type (Exercise 1)
 
diff -ru fingertree-0.1.1.0.orig/Data/IntervalMap/FingerTree.hs fingertree-0.1.1.0/Data/IntervalMap/FingerTree.hs
--- fingertree-0.1.1.0.orig/Data/IntervalMap/FingerTree.hs	2015-06-09 13:26:48.000000000 +0200
+++ fingertree-0.1.1.0/Data/IntervalMap/FingerTree.hs	2017-09-17 09:07:17.097589571 +0200
@@ -77,12 +77,23 @@
 -- rightmost interval (including largest lower bound) and largest upper bound.
 data IntInterval v = NoInterval | IntInterval (Interval v) v
 
+#if MIN_VERSION_base(4,9,0)
+instance Ord v => Semigroup (IntInterval v) where
+    (<>) = intervalUnion
+#endif
+
 instance Ord v => Monoid (IntInterval v) where
     mempty = NoInterval
-    NoInterval `mappend` i  = i
-    i `mappend` NoInterval  = i
-    IntInterval _ hi1 `mappend` IntInterval int2 hi2 =
-        IntInterval int2 (max hi1 hi2)
+#if !(MIN_VERSION_base(4,11,0))
+    mappend = intervalUnion
+#endif
+
+intervalUnion :: Ord v => IntInterval v -> IntInterval v -> IntInterval v
+NoInterval `intervalUnion` i  = i
+i `intervalUnion` NoInterval  = i
+IntInterval _ hi1 `intervalUnion` IntInterval int2 hi2 =
+    IntInterval int2 (max hi1 hi2)
+
 
 instance (Ord v) => Measured (IntInterval v) (Node v a) where
     measure (Node i _) = IntInterval i (high i)
@@ -104,10 +115,18 @@
     traverse f (IntervalMap t) =
         IntervalMap <$> FT.unsafeTraverse (traverse f) t
 
+#if MIN_VERSION_base(4,9,0)
+-- | 'union'.
+instance (Ord v) => Semigroup (IntervalMap v a) where
+    (<>) = union
+#endif
+
 -- | 'empty' and 'union'.
 instance (Ord v) => Monoid (IntervalMap v a) where
     mempty = empty
+#if !(MIN_VERSION_base(4,11,0))
     mappend = union
+#endif
 
 -- | /O(1)/.  The empty interval map.
 empty :: (Ord v) => IntervalMap v a
diff -ru fingertree-0.1.1.0.orig/Data/PriorityQueue/FingerTree.hs fingertree-0.1.1.0/Data/PriorityQueue/FingerTree.hs
--- fingertree-0.1.1.0.orig/Data/PriorityQueue/FingerTree.hs	2015-06-09 13:26:48.000000000 +0200
+++ fingertree-0.1.1.0/Data/PriorityQueue/FingerTree.hs	2017-09-17 10:33:39.103399420 +0200
@@ -60,6 +60,9 @@
 import Control.Arrow ((***))
 import Data.Foldable (Foldable(foldMap))
 import Data.Monoid
+#if MIN_VERSION_base(4,9,0)
+import Data.Semigroup
+#endif
 import Prelude hiding (null)
 
 data Entry k v = Entry k v
@@ -72,13 +75,23 @@
 
 data Prio k v = NoPrio | Prio k v
 
+#if MIN_VERSION_base(4,9,0)
+instance Ord k => Semigroup (Prio k v) where
+    (<>) = unionPrio
+#endif
+
 instance Ord k => Monoid (Prio k v) where
-    mempty                  = NoPrio
-    x `mappend` NoPrio      = x
-    NoPrio `mappend` y      = y
-    x@(Prio kx _) `mappend` y@(Prio ky _)
-      | kx <= ky            = x
-      | otherwise           = y
+    mempty  = NoPrio
+#if !(MIN_VERSION_base(4,11,0))
+    mappend = unionPrio
+#endif
+
+unionPrio :: Ord k => Prio k v -> Prio k v -> Prio k v
+x `unionPrio` NoPrio      = x
+NoPrio `unionPrio` y      = y
+x@(Prio kx _) `unionPrio` y@(Prio ky _)
+  | kx <= ky            = x
+  | otherwise           = y
 
 instance Ord k => Measured (Prio k v) (Entry k v) where
     measure (Entry k v) = Prio k v
@@ -94,9 +107,16 @@
         Nothing -> mempty
         Just (v, q') -> f v `mappend` foldMap f q'
 
+#if MIN_VERSION_base(4,9,0)
+instance Ord k => Semigroup (PQueue k v) where
+    (<>) = union
+#endif
+
 instance Ord k => Monoid (PQueue k v) where
     mempty = empty
+#if !(MIN_VERSION_base(4,11,0))
     mappend = union
+#endif
 
 -- | /O(1)/. The empty priority queue.
 empty :: Ord k => PQueue k v
