diff -ru foundation-0.0.15.orig/Foundation/Array/Bitmap.hs foundation-0.0.15/Foundation/Array/Bitmap.hs
--- foundation-0.0.15.orig/Foundation/Array/Bitmap.hs	2017-08-26 07:35:24.000000000 +0200
+++ foundation-0.0.15/Foundation/Array/Bitmap.hs	2017-09-15 12:09:21.009784402 +0200
@@ -43,6 +43,7 @@
 import           Foundation.Bits
 import           GHC.ST
 import qualified Data.List
+import Data.Semigroup
 
 data Bitmap = Bitmap (CountOf Bool) (UArray Word32)
 
@@ -63,9 +64,13 @@
     (==) = equal
 instance Ord Bitmap where
     compare = vCompare
+
+instance Semigroup Bitmap where
+    (<>) = append
+
 instance Monoid Bitmap where
     mempty  = empty
-    mappend = append
+    mappend = (<>)
     mconcat = concat
 
 type instance C.Element Bitmap = Bool
Only in foundation-0.0.15/Foundation/Array: Bitmap.hs~
diff -ru foundation-0.0.15.orig/Foundation/Array/Chunked/Unboxed.hs foundation-0.0.15/Foundation/Array/Chunked/Unboxed.hs
--- foundation-0.0.15.orig/Foundation/Array/Chunked/Unboxed.hs	2017-08-26 07:35:24.000000000 +0200
+++ foundation-0.0.15/Foundation/Array/Chunked/Unboxed.hs	2017-09-15 12:10:04.481538992 +0200
@@ -32,7 +32,7 @@
 import           Foundation.Numerical
 import           Foundation.Primitive
 import qualified Foundation.Collection as C
-
+import Data.Semigroup
 
 newtype ChunkedUArray ty = ChunkedUArray (Array (UArray ty))
                       deriving (Show, Ord, Typeable)
@@ -42,9 +42,12 @@
 instance NormalForm (ChunkedUArray ty) where
     toNormalForm (ChunkedUArray spine) = toNormalForm spine
 
+instance Semigroup (ChunkedUArray a) where
+    (<>) = append
+
 instance Monoid (ChunkedUArray a) where
     mempty  = empty
-    mappend = append
+    mappend = (<>)
     mconcat = concat
 
 type instance C.Element (ChunkedUArray ty) = ty
Only in foundation-0.0.15/Foundation/Array/Chunked: Unboxed.hs~
diff -ru foundation-0.0.15.orig/Foundation/List/DList.hs foundation-0.0.15/Foundation/List/DList.hs
--- foundation-0.0.15.orig/Foundation/List/DList.hs	2017-09-03 10:51:08.000000000 +0200
+++ foundation-0.0.15/Foundation/List/DList.hs	2017-09-15 12:08:51.737949839 +0200
@@ -14,6 +14,7 @@
 import Basement.Compat.Base
 import Foundation.Collection
 import Basement.Compat.Bifunctor
+import Data.Semigroup
 
 newtype DList a = DList { unDList :: [a] -> [a] }
   deriving (Typeable)
@@ -32,9 +33,12 @@
     fromList = DList . (<>)
     toList = flip unDList []
 
+instance Semigroup (DList a) where
+    dl1 <> dl2 = DList $ unDList dl1 . unDList dl2
+
 instance Monoid (DList a) where
     mempty = DList id
-    mappend dl1 dl2 = DList $ unDList dl1 . unDList dl2
+    mappend = (<>)
 
 instance Functor DList where
     fmap f = foldr (cons . f) mempty
Only in foundation-0.0.15/Foundation/List: DList.hs~
diff -ru foundation-0.0.15.orig/Foundation/String/Builder.hs foundation-0.0.15/Foundation/String/Builder.hs
--- foundation-0.0.15.orig/Foundation/String/Builder.hs	2017-08-05 12:49:52.000000000 +0200
+++ foundation-0.0.15/Foundation/String/Builder.hs	2017-09-15 12:10:28.845402633 +0200
@@ -20,18 +20,19 @@
 --import           Basement.Compat.Semigroup
 import           Basement.String                (String)
 import qualified Basement.String as S
+import Data.Semigroup
 
 data Builder = E String | T [Builder]
 
 instance IsString Builder where
     fromString = E . fromString
 
---instance Semigroup Builder where
---    (<>) = append
+instance Semigroup Builder where
+    (<>) = append
 
 instance Monoid Builder where
     mempty = empty
-    mappend = append
+    mappend = (<>)
     mconcat = concat
 
 empty :: Builder
Only in foundation-0.0.15/Foundation/String: Builder.hs~
diff -ru foundation-0.0.15.orig/Foundation/VFS/FilePath.hs foundation-0.0.15/Foundation/VFS/FilePath.hs
--- foundation-0.0.15.orig/Foundation/VFS/FilePath.hs	2017-08-05 12:49:52.000000000 +0200
+++ foundation-0.0.15/Foundation/VFS/FilePath.hs	2017-09-15 12:11:04.621202371 +0200
@@ -39,6 +39,7 @@
 import Foundation.Array
 import Foundation.String (Encoding(..), ValidationFailure, toBytes, fromBytes, String)
 import Foundation.VFS.Path(Path(..))
+import Data.Semigroup
 
 import qualified Data.List
 -- ------------------------------------------------------------------------- --
@@ -184,6 +185,9 @@
 hasContigueSeparators (x1:x2:xs) =
     (isSeparator x1 && x1 == x2) || hasContigueSeparators xs
 
+instance Semigroup FileName where
+      (FileName a) <> (FileName b) = FileName $ a `mappend` b
+
 instance Monoid FileName where
       mempty = FileName mempty
       mappend (FileName a) (FileName b) = FileName $ a `mappend` b
Only in foundation-0.0.15/Foundation/VFS: FilePath.hs~
