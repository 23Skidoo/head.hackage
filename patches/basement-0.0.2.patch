diff -ru basement-0.0.2.orig/Basement/Block/Base.hs basement-0.0.2/Basement/Block/Base.hs
--- basement-0.0.2.orig/Basement/Block/Base.hs	2017-08-05 12:49:52.000000000 +0200
+++ basement-0.0.2/Basement/Block/Base.hs	2017-09-15 11:58:10.129571964 +0200
@@ -40,6 +40,7 @@
 import           Basement.NormalForm
 import           Basement.Numerical.Additive
 import           Basement.PrimType
+import           Data.Semigroup
 
 -- | A block of memory containing unpacked bytes representing values of type 'ty'
 data Block ty = Block ByteArray#
@@ -63,9 +64,12 @@
 instance (PrimType ty, Ord ty) => Ord (Block ty) where
     compare = internalCompare
 
+instance PrimType ty => Semigroup (Block ty) where
+    (<>) = append
+
 instance PrimType ty => Monoid (Block ty) where
     mempty  = empty
-    mappend = append
+    mappend = (<>)
     mconcat = concat
 
 instance PrimType ty => IsList (Block ty) where
Only in basement-0.0.2/Basement/Block: Base.hs~
diff -ru basement-0.0.2.orig/Basement/BoxedArray.hs basement-0.0.2/Basement/BoxedArray.hs
--- basement-0.0.2.orig/Basement/BoxedArray.hs	2017-09-03 10:51:08.000000000 +0200
+++ basement-0.0.2/Basement/BoxedArray.hs	2017-09-15 11:59:29.993121551 +0200
@@ -89,6 +89,7 @@
 import           Basement.Exception
 import           Basement.MutableBuilder
 import qualified Basement.Compat.ExtList as List
+import           Data.Semigroup
 
 -- | Array of a
 data Array a = Array {-# UNPACK #-} !(Offset a)
@@ -121,9 +122,12 @@
 instance Functor Array where
     fmap = map
 
+instance Semigroup (Array a) where
+    (<>) = append
+
 instance Monoid (Array a) where
     mempty  = empty
-    mappend = append
+    mappend = (<>)
     mconcat = concat
 
 instance Show a => Show (Array a) where
Only in basement-0.0.2/Basement: BoxedArray.hs~
diff -ru basement-0.0.2.orig/Basement/Types/AsciiString.hs basement-0.0.2/Basement/Types/AsciiString.hs
--- basement-0.0.2.orig/Basement/Types/AsciiString.hs	2017-08-31 18:47:35.000000000 +0200
+++ basement-0.0.2/Basement/Types/AsciiString.hs	2017-09-15 11:59:50.401006434 +0200
@@ -26,10 +26,11 @@
 import           Basement.UArray.Base
 import qualified Basement.Types.Char7 as Char7
 import qualified Basement.UArray as A (all, unsafeRecast)
+import           Data.Semigroup
 
 -- | Opaque packed array of characters in the ASCII encoding
 newtype AsciiString = AsciiString { toBytes :: UArray Char7 }
-    deriving (Typeable, Monoid, Eq, Ord)
+    deriving (Typeable, Semigroup, Monoid, Eq, Ord)
 
 newtype MutableAsciiString st = MutableAsciiString (MUArray Char7 st)
     deriving (Typeable)
Only in basement-0.0.2/Basement/Types: AsciiString.hs~
diff -ru basement-0.0.2.orig/Basement/Types/OffsetSize.hs basement-0.0.2/Basement/Types/OffsetSize.hs
--- basement-0.0.2.orig/Basement/Types/OffsetSize.hs	2017-09-03 10:51:08.000000000 +0200
+++ basement-0.0.2/Basement/Types/OffsetSize.hs	2017-09-15 11:57:22.061842997 +0200
@@ -55,6 +55,7 @@
 import Basement.IntegralConv
 import Data.List (foldl')
 import qualified Prelude
+import Data.Semigroup
 
 #if WORD_SIZE_IN_BITS < 64
 import GHC.IntWord64
@@ -193,9 +194,12 @@
     (CountOf a) - (CountOf b) | a >= b    = Just . CountOf $ a - b
                               | otherwise = Nothing
 
+instance Semigroup (CountOf ty) where
+    (<>) = (+)
+
 instance Monoid (CountOf ty) where
     mempty = azero
-    mappend = (+)
+    mappend = (<>)
     mconcat = foldl' (+) 0
 
 instance IntegralCast Int (CountOf ty) where
Only in basement-0.0.2/Basement/Types: OffsetSize.hs~
diff -ru basement-0.0.2.orig/Basement/UArray/Base.hs basement-0.0.2/Basement/UArray/Base.hs
--- basement-0.0.2.orig/Basement/UArray/Base.hs	2017-09-08 08:03:42.000000000 +0200
+++ basement-0.0.2/Basement/UArray/Base.hs	2017-09-15 11:58:58.345300054 +0200
@@ -72,6 +72,7 @@
 import           Basement.Bindings.Memory
 import           Foreign.C.Types
 import           System.IO.Unsafe (unsafeDupablePerformIO)
+import           Data.Semigroup
 
 -- | A Mutable array of types built on top of GHC primitive.
 --
@@ -114,9 +115,12 @@
     {-# SPECIALIZE instance Ord (UArray Word8) #-}
     compare = vCompare
 
+instance PrimType ty => Semigroup (UArray ty) where
+    (<>) = append
+
 instance PrimType ty => Monoid (UArray ty) where
     mempty  = empty
-    mappend = append
+    mappend = (<>)
     mconcat = concat
 
 instance PrimType ty => IsList (UArray ty) where
Only in basement-0.0.2/Basement/UArray: Base.hs~
diff -ru basement-0.0.2.orig/Basement/UTF8/Base.hs basement-0.0.2/Basement/UTF8/Base.hs
--- basement-0.0.2.orig/Basement/UTF8/Base.hs	2017-09-08 08:03:42.000000000 +0200
+++ basement-0.0.2/Basement/UTF8/Base.hs	2017-09-15 12:00:02.536937977 +0200
@@ -41,11 +41,12 @@
 import           GHC.CString                        (unpackCString#, unpackCStringUtf8#)
 
 import           Data.Data
+import           Data.Semigroup
 import           Basement.Compat.ExtList as List
 
 -- | Opaque packed array of characters in the UTF8 encoding
 newtype String = String (UArray Word8)
-    deriving (Typeable, Monoid, Eq, Ord)
+    deriving (Typeable, Semigroup, Monoid, Eq, Ord)
 
 -- | Mutable String Buffer.
 --
Only in basement-0.0.2/Basement/UTF8: Base.hs~
