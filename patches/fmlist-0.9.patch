diff -ru fmlist-0.9.orig/Data/FMList.hs fmlist-0.9/Data/FMList.hs
--- fmlist-0.9.orig/Data/FMList.hs	2015-01-02 11:46:31.000000000 +0100
+++ fmlist-0.9/Data/FMList.hs	2017-09-17 11:03:22.769360899 +0200
@@ -87,7 +87,8 @@
   , Show(..), String, (++)
   )
 import Data.Maybe (Maybe(..), maybe, fromMaybe, isNothing)
-import Data.Monoid
+import qualified Data.Semigroup as Semigroup
+import Data.Monoid hiding ((<>))
 import Data.Foldable (Foldable, foldMap, foldr, toList)
 import Data.Traversable (Traversable, traverse)
 import Control.Monad
@@ -256,9 +257,13 @@
 
 
 newtype WrapApp f m = WrapApp { unWrapApp :: f m }
+
+instance (Applicative f, Semigroup.Semigroup m) => Semigroup.Semigroup (WrapApp f m) where
+  WrapApp a <> WrapApp b = WrapApp $ (Semigroup.<>) <$> a <*> b
+
 instance (Applicative f, Monoid m) => Monoid (WrapApp f m) where
   mempty                          = WrapApp $ pure mempty
-  mappend (WrapApp a) (WrapApp b) = WrapApp $ mappend <$> a <*> b
+  mappend = (Semigroup.<>)
 
 -- | Map each element of a structure to an action, evaluate these actions from left to right,
 -- and concat the monoid results.
@@ -289,9 +294,12 @@
   as <*  bs  = transform (\f a -> unFM bs (const (f a))) as
   as  *> bs  = transform (\f   -> const (unFM bs f)) as
 
+instance Semigroup.Semigroup (FMList a) where
+  (<>)       = (><)
+
 instance Monoid (FMList a) where
   mempty     = nil
-  mappend    = (><)
+  mappend    = (Semigroup.<>)
 
 instance MonadPlus FMList where
   mzero      = nil
Only in fmlist-0.9/Data: FMList.hs~
