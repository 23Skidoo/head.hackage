commit dca20cc273e6ad80ae835d77866cd9a7350304b8
Author: Ryan Scott <ryan.gl.scott@gmail.com>
Date:   Mon Dec 10 12:41:33 2018 -0500

    Allow building with template-haskell-2.15.0.0

diff --git a/src/Generics/SOP/TH.hs b/src/Generics/SOP/TH.hs
index 4c3522e..fc3fc92 100644
--- a/src/Generics/SOP/TH.hs
+++ b/src/Generics/SOP/TH.hs
@@ -193,7 +193,12 @@ deriveGenericForDataDec f _isNewtype _cxt name bndrs cons _derivs = do

 deriveGenericForDataType :: (Name -> Q Type) -> Q Type -> [Con] -> Q [Dec]
 deriveGenericForDataType f typ cons = do
-  let codeSyn = tySynInstD ''Code $ tySynEqn [typ] (codeFor f cons)
+  let codeSyn =
+#if MIN_VERSION_template_haskell(2,15,0)
+                tySynInstD $ tySynEqn Nothing (conT ''Code `appT` typ) (codeFor f cons)
+#else
+                tySynInstD ''Code $ tySynEqn [typ] (codeFor f cons)
+#endif
   inst <- instanceD
             (cxt [])
             [t| Generic $typ |]
@@ -301,7 +306,11 @@ projection toName = funD toName . go'

 metadataType :: Q Type -> Bool -> Name -> [Con] -> Q Dec
 metadataType typ isNewtype typeName cs =
+#if MIN_VERSION_template_haskell(2,15,0)
+  tySynInstD (tySynEqn Nothing (conT ''DatatypeInfoOf `appT` typ) (metadataType' isNewtype typeName cs))
+#else
   tySynInstD ''DatatypeInfoOf (tySynEqn [typ] (metadataType' isNewtype typeName cs))
+#endif

 -- | Derive term-level metadata.
 metadata' :: Bool -> Name -> [Con] -> Q Exp
