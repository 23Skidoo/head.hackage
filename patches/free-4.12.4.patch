Only in free-4.12.4: dist-newstyle
diff -ru free-4.12.4.0/free.cabal free-4.12.4/free.cabal
--- free-4.12.4.0/free.cabal	2017-09-14 17:19:06.315447212 +0200
+++ free-4.12.4/free.cabal	2017-09-14 17:19:35.291284981 +0200
@@ -101,3 +101,9 @@
     Control.Monad.Trans.Iter
 
   ghc-options: -Wall
+
+  -- See https://ghc.haskell.org/trac/ghc/wiki/Migration/8.0#base-4.9.0.0
+  if impl(ghc >= 8.0)
+    ghc-options: -Wcompat -Wnoncanonical-monad-instances -Wnoncanonical-monadfail-instances
+  else
+    build-depends: fail == 4.9.*
Only in free-4.12.4: .ghc.environment.x86_64-linux-8.2.1
diff -ru free-4.12.4.0/src/Control/Alternative/Free/Final.hs free-4.12.4/src/Control/Alternative/Free/Final.hs
--- free-4.12.4.0/src/Control/Alternative/Free/Final.hs	2016-01-17 03:15:13.000000000 +0100
+++ free-4.12.4/src/Control/Alternative/Free/Final.hs	2017-09-14 17:19:35.291284981 +0200
@@ -49,7 +49,7 @@
 
 instance Monoid (Alt f a) where
   mempty = empty
-  mappend = (<|>)
+  mappend = (<>)
 
 -- | A version of 'lift' that can be used with @f@.
 liftAlt :: f a -> Alt f a
diff -ru free-4.12.4.0/src/Control/Alternative/Free.hs free-4.12.4/src/Control/Alternative/Free.hs
--- free-4.12.4.0/src/Control/Alternative/Free.hs	2016-01-17 03:15:13.000000000 +0100
+++ free-4.12.4/src/Control/Alternative/Free.hs	2017-09-14 17:19:35.291284981 +0200
@@ -117,7 +117,7 @@
 instance (Functor f) => Monoid (Alt f a) where
   mempty = empty
   {-# INLINE mempty #-}
-  mappend = (<|>)
+  mappend = (<>)
   {-# INLINE mappend #-}
   mconcat as = Alt (as >>= alternatives)
   {-# INLINE mconcat #-}
diff -ru free-4.12.4.0/src/Control/Monad/Trans/Free.hs free-4.12.4/src/Control/Monad/Trans/Free.hs
--- free-4.12.4.0/src/Control/Monad/Trans/Free.hs	2016-01-17 03:15:13.000000000 +0100
+++ free-4.12.4/src/Control/Monad/Trans/Free.hs	2017-09-14 17:19:35.291284981 +0200
@@ -62,6 +62,7 @@
 import Control.Monad.Catch (MonadThrow(..), MonadCatch(..))
 import Control.Monad.Trans.Class
 import Control.Monad.Free.Class
+import qualified Control.Monad.Fail as Fail
 import Control.Monad.IO.Class
 import Control.Monad.Reader.Class
 import Control.Monad.Writer.Class
@@ -223,13 +224,17 @@
   (>>-) = (>>=)
 
 instance (Functor f, Monad m) => Monad (FreeT f m) where
-  fail e = FreeT (fail e)
   return = pure
   {-# INLINE return #-}
   FreeT m >>= f = FreeT $ m >>= \v -> case v of
     Pure a -> runFreeT (f a)
     Free w -> return (Free (fmap (>>= f) w))
 
+  fail = Fail.fail
+
+instance (Functor f, Monad m) => Fail.MonadFail (FreeT f m) where
+  fail e = FreeT (fail e)
+
 instance MonadTrans (FreeT f) where
   lift = FreeT . liftM Pure
   {-# INLINE lift #-}
diff -ru free-4.12.4.0/src/Control/Monad/Trans/Iter.hs free-4.12.4/src/Control/Monad/Trans/Iter.hs
--- free-4.12.4.0/src/Control/Monad/Trans/Iter.hs	2016-01-17 03:15:13.000000000 +0100
+++ free-4.12.4/src/Control/Monad/Trans/Iter.hs	2017-09-14 17:21:25.950665537 +0200
@@ -81,6 +81,7 @@
 import Control.Monad (ap, liftM, MonadPlus(..), join)
 import Control.Monad.Fix
 import Control.Monad.Trans.Class
+import qualified Control.Monad.Fail as Fail
 import Control.Monad.Free.Class
 import Control.Monad.State.Class
 import Control.Monad.Error.Class
@@ -94,7 +95,7 @@
 import Data.Functor.Bind hiding (join)
 import Data.Functor.Identity
 import Data.Function (on)
-import Data.Monoid
+import Data.Semigroup
 import Data.Semigroup.Foldable
 import Data.Semigroup.Traversable
 import Data.Typeable
@@ -176,6 +177,10 @@
   {-# INLINE return #-}
   IterT m >>= k = IterT $ m >>= either (runIterT . k) (return . Right . (>>= k))
   {-# INLINE (>>=) #-}
+  fail = Fail.fail
+  {-# INLINE fail #-}
+
+instance Monad m => Fail.MonadFail (IterT m) where
   fail _ = never
   {-# INLINE fail #-}
 
@@ -240,7 +245,7 @@
   listen (IterT m) = IterT $ liftM concat' $ listen (fmap listen `liftM` m)
     where
       concat' (Left  x, w) = Left (x, w)
-      concat' (Right y, w) = Right $ second (w <>) <$> y
+      concat' (Right y, w) = Right $ second (w `mappend`) <$> y
   pass m = IterT . pass' . runIterT . hoistIterT clean $ listen m
     where
       clean = pass . liftM (\x -> (x, const mempty))
@@ -388,17 +393,9 @@
 interleave_ xs = IterT $ liftM (Right . interleave_ . rights) $ mapM runIterT xs
 {-# INLINE interleave_ #-}
 
-instance (Monad m, Monoid a) => Monoid (IterT m a) where
+instance (Monad m, Semigroup a, Monoid a) => Monoid (IterT m a) where
   mempty = return mempty
-  x `mappend` y = IterT $ do
-    x' <- runIterT x
-    y' <- runIterT y
-    case (x', y') of
-      ( Left a, Left b)  -> return . Left  $ a `mappend` b
-      ( Left a, Right b) -> return . Right $ liftM (a `mappend`) b
-      (Right a, Left b)  -> return . Right $ liftM (`mappend` b) a
-      (Right a, Right b) -> return . Right $ a `mappend` b
-
+  mappend = (<>)
   mconcat = mconcat' . map Right
     where
       mconcat' :: (Monad m, Monoid a) => [Either a (IterT m a)] -> IterT m a
@@ -416,7 +413,17 @@
 
       compact' a []               = [Left a]
       compact' a (r@(Right _):xs) = (Left a):(r:(compact xs))
-      compact' a (  (Left a'):xs) = compact' (a <> a') xs
+      compact' a (  (Left a'):xs) = compact' (a `mappend` a') xs
+
+instance (Monad m, Semigroup a) => Semigroup (IterT m a) where
+  x <> y = IterT $ do
+    x' <- runIterT x
+    y' <- runIterT y
+    case (x', y') of
+      ( Left a, Left b)  -> return . Left  $ a <> b
+      ( Left a, Right b) -> return . Right $ liftM (a <>) b
+      (Right a, Left b)  -> return . Right $ liftM (<> b) a
+      (Right a, Right b) -> return . Right $ a <> b
 
 #if __GLASGOW_HASKELL__ < 707
 instance Typeable1 m => Typeable1 (IterT m) where
