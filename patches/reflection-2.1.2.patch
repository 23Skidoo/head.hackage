From 4e53c744d8d0dbea7e975e20bce068cf3e425a58 Mon Sep 17 00:00:00 2001
From: Ryan Scott <ryan.gl.scott@gmail.com>
Date: Fri, 8 Sep 2017 19:42:57 -0400
Subject: [PATCH] =?UTF-8?q?Adapt=20to=20the=20Semigroup=E2=80=93Monoid=20P?=
 =?UTF-8?q?roposal?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

 examples/Monoid.hs      | 11 ++++++++---
 fast/Data/Reflection.hs | 10 ++++++++--

diff --git a/examples/Monoid.hs b/examples/Monoid.hs
index 22a05ff..838f20f 100644
--- a/examples/Monoid.hs
+++ b/examples/Monoid.hs
@@ -1,6 +1,6 @@
-{-# LANGUAGE Rank2Types, FlexibleContexts, UndecidableInstances #-}
+{-# LANGUAGE CPP, Rank2Types, FlexibleContexts, UndecidableInstances #-}
 import Data.Reflection -- from reflection
-import Data.Monoid     -- from base
+import Data.Semigroup  -- from base
 import Data.Proxy      -- from tagged
 
 -- | Values in our dynamically-constructed 'Monoid' over 'a'
@@ -9,8 +9,13 @@ newtype M a s = M { runM :: a } deriving (Eq,Ord)
 -- | A dictionary describing a 'Monoid'
 data Monoid_ a = Monoid_ { mappend_ :: a -> a -> a, mempty_ :: a }
 
+instance Reifies s (Monoid_ a) => Semigroup (M a s) where
+  a <> b = M $ mappend_ (reflect a) (runM a) (runM b)
+
 instance Reifies s (Monoid_ a) => Monoid (M a s) where
-  mappend a b        = M $ mappend_ (reflect a) (runM a) (runM b)
+#if !(MIN_VERSION_base(4,11,0))
+  mappend = (<>)
+#endif
   mempty = a where a = M $ mempty_ (reflect a)
 
 -- Construct a 'Monoid' instance out of a binary operation and unit that you have in scope!
diff --git a/fast/Data/Reflection.hs b/fast/Data/Reflection.hs
index 5e98a73..1205001 100644
--- a/fast/Data/Reflection.hs
+++ b/fast/Data/Reflection.hs
@@ -120,6 +120,7 @@ import Data.Foldable
 import Data.Monoid
 #endif
 
+import Data.Semigroup as Sem
 import Data.Proxy
 
 #if __GLASGOW_HASKELL__ < 710
@@ -357,7 +358,7 @@ onProxyType1 f
     | proxyName == ''Proxy = ConE 'Proxy `SigE` (ConT ''Proxy `AppT` f ta)
 onProxyType1 f a =
         LamE [SigP WildP na] body `AppE` a
-    where 
+    where
           body = ConE 'Proxy `SigE` (ConT ''Proxy `AppT` f na)
           na = VarT (mkName "na")
 
@@ -552,8 +553,13 @@ reifyTypeable a k = unsafePerformIO $ do
 
 data ReifiedMonoid a = ReifiedMonoid { reifiedMappend :: a -> a -> a, reifiedMempty :: a }
 
+instance Reifies s (ReifiedMonoid a) => Sem.Semigroup (ReflectedMonoid a s) where
+  ReflectedMonoid x <> ReflectedMonoid y = reflectResult (\m -> ReflectedMonoid (reifiedMappend m x y))
+
 instance Reifies s (ReifiedMonoid a) => Monoid (ReflectedMonoid a s) where
-  mappend (ReflectedMonoid x) (ReflectedMonoid y) = reflectResult (\m -> ReflectedMonoid (reifiedMappend m x y))
+#if !(MIN_VERSION_base(4,11,0))
+  mappend = (<>)
+#endif
   mempty = reflectResult (\m -> ReflectedMonoid (reifiedMempty  m    ))
 
 reflectResult :: forall f s a. Reifies s a => (a -> f s) -> f s
diff --git a/reflection.cabal b/reflection.cabal
index 4d42881..d33250f 100644
--- a/reflection.cabal
+++ b/reflection.cabal
@@ -70,6 +70,10 @@ library
     build-depends:
       tagged >= 0.4.4 && < 1
 
+  if !impl(ghc >= 8.0)
+    build-depends:
+      semigroups >= 0.11 && < 0.19
+
   default-language: Haskell98
 
   if flag(template-haskell) && impl(ghc)
diff --git a/fast/Data/Reflection.hs b/fast/Data/Reflection.hs
index 1205001..26cbbd9 100644
--- a/fast/Data/Reflection.hs
+++ b/fast/Data/Reflection.hs
@@ -117,7 +117,6 @@ import Data.Bits
 
 #if __GLASGOW_HASKELL__ < 710
 import Data.Foldable
-import Data.Monoid
 #endif
 
 import Data.Semigroup as Sem

