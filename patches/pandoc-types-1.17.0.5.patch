diff -ru pandoc-types-1.17.1.orig/Text/Pandoc/Builder.hs pandoc-types-1.17.1/Text/Pandoc/Builder.hs
--- pandoc-types-1.17.1.orig/Text/Pandoc/Builder.hs	2017-08-20 21:07:01.000000000 +0200
+++ pandoc-types-1.17.1/Text/Pandoc/Builder.hs	2017-09-18 12:13:20.756536003 +0200
@@ -177,17 +177,7 @@
 import Data.Data
 import Control.Arrow ((***))
 import GHC.Generics (Generic)
-
-#if MIN_VERSION_base(4,5,0)
--- (<>) is defined in Data.Monoid
-#else
-infixr 6 <>
-
--- | An infix synonym for 'mappend'.
-(<>) :: Monoid m => m -> m -> m
-(<>) = mappend
-{-# INLINE (<>) #-}
-#endif
+import Data.Semigroup (Semigroup(..))
 
 newtype Many a = Many { unMany :: Seq a }
                  deriving (Data, Ord, Eq, Typeable, Foldable, Traversable, Functor, Show, Read)
@@ -209,11 +199,15 @@
 type Inlines = Many Inline
 type Blocks  = Many Block
 
+deriving instance Semigroup Blocks
 deriving instance Monoid Blocks
 
 instance Monoid Inlines where
   mempty = Many mempty
-  (Many xs) `mappend` (Many ys) =
+  mappend = (<>)
+
+instance Semigroup Inlines where
+  (Many xs) <> (Many ys) =
     case (viewr xs, viewl ys) of
       (EmptyR, _) -> Many ys
       (_, EmptyL) -> Many xs
Only in pandoc-types-1.17.1/Text/Pandoc: Builder.hs~
diff -ru pandoc-types-1.17.1.orig/Text/Pandoc/Definition.hs pandoc-types-1.17.1/Text/Pandoc/Definition.hs
--- pandoc-types-1.17.1.orig/Text/Pandoc/Definition.hs	2017-08-20 21:07:01.000000000 +0200
+++ pandoc-types-1.17.1/Text/Pandoc/Definition.hs	2017-09-18 12:11:07.829292907 +0200
@@ -88,27 +88,34 @@
 import Control.Applicative ((<$>), (<*>))
 import Control.DeepSeq.Generics
 #endif
+import Data.Semigroup (Semigroup(..))
 import Paths_pandoc_types (version)
 import Data.Version (Version, versionBranch)
 
 data Pandoc = Pandoc Meta [Block]
               deriving (Eq, Ord, Read, Show, Typeable, Data, Generic)
 
+instance Semigroup Pandoc where
+  (Pandoc m1 bs1) <> (Pandoc m2 bs2) =
+    Pandoc (m1 <> m2) (bs1 <> bs2)
+
 instance Monoid Pandoc where
   mempty = Pandoc mempty mempty
-  (Pandoc m1 bs1) `mappend` (Pandoc m2 bs2) =
-    Pandoc (m1 `mappend` m2) (bs1 `mappend` bs2)
+  mappend = (<>)
 
 -- | Metadata for the document:  title, authors, date.
 newtype Meta = Meta { unMeta :: M.Map String MetaValue }
                deriving (Eq, Ord, Show, Read, Typeable, Data, Generic)
 
-instance Monoid Meta where
-  mempty = Meta (M.empty)
-  (Meta m1) `mappend` (Meta m2) = Meta (M.union m1 m2)
+instance Semigroup Meta where
+  (Meta m1) <> (Meta m2) = Meta (M.union m1 m2)
   -- note: M.union is left-biased, so if there are fields in both m1
   -- and m2, m1 wins.
 
+instance Monoid Meta where
+  mempty = Meta (M.empty)
+  mappend = (<>)
+
 data MetaValue = MetaMap (M.Map String MetaValue)
                | MetaList [MetaValue]
                | MetaBool Bool
Only in pandoc-types-1.17.1/Text/Pandoc: Definition.hs~
